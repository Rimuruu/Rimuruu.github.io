
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, o as onMount, v as validate_slots, e as element, g as space, t as text, a as attr_dev, b as add_location, c as insert_dev, h as append_dev, n as noop, f as detach_dev, j as binding_callbacks } from './main-af5ef794.js';

/* src\game\Tetris.svelte generated by Svelte v3.24.0 */
const file = "src\\game\\Tetris.svelte";

function create_fragment(ctx) {
	let div2;
	let div0;
	let canvas_1;
	let t0;
	let div1;
	let h1;
	let t1;
	let a;
	let t3;
	let h2;
	let t4;
	let br0;
	let t5;
	let br1;
	let t6;
	let br2;
	let t7;
	let br3;
	let t8;

	const block = {
		c: function create() {
			div2 = element("div");
			div0 = element("div");
			canvas_1 = element("canvas");
			t0 = space();
			div1 = element("div");
			h1 = element("h1");
			t1 = text("Score :");
			a = element("a");
			a.textContent = "0";
			t3 = space();
			h2 = element("h2");
			t4 = text("Controle:");
			br0 = element("br");
			t5 = text(" Z=ROTATE");
			br1 = element("br");
			t6 = text(" S=DOWN");
			br2 = element("br");
			t7 = text(" Q=LEFT");
			br3 = element("br");
			t8 = text(" D=RIGHT");
			attr_dev(canvas_1, "id", "frame");
			attr_dev(canvas_1, "width", "400");
			attr_dev(canvas_1, "height", "800");
			add_location(canvas_1, file, 449, 3, 7192);
			attr_dev(div0, "id", "tetris");
			add_location(div0, file, 447, 2, 7166);
			attr_dev(a, "id", "score");
			add_location(a, file, 454, 38, 7340);
			attr_dev(h1, "class", "text-dark");
			add_location(h1, file, 454, 9, 7311);
			add_location(br0, file, 455, 46, 7435);
			add_location(br1, file, 455, 59, 7448);
			add_location(br2, file, 455, 70, 7459);
			add_location(br3, file, 455, 81, 7470);
			attr_dev(h2, "class", "text-dark");
			attr_dev(h2, "id", "tetrist");
			add_location(h2, file, 455, 2, 7391);
			attr_dev(div1, "id", "help");
			attr_dev(div1, "class", "svelte-mlsbvo");
			add_location(div1, file, 453, 2, 7285);
			attr_dev(div2, "class", "d-flex d-inline-block");
			attr_dev(div2, "id", "wrap");
			add_location(div2, file, 445, 1, 7115);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div0);
			append_dev(div0, canvas_1);
			/*canvas_1_binding*/ ctx[2](canvas_1);
			append_dev(div2, t0);
			append_dev(div2, div1);
			append_dev(div1, h1);
			append_dev(h1, t1);
			append_dev(h1, a);
			/*a_binding*/ ctx[3](a);
			append_dev(div1, t3);
			append_dev(div1, h2);
			append_dev(h2, t4);
			append_dev(h2, br0);
			append_dev(h2, t5);
			append_dev(h2, br1);
			append_dev(h2, t6);
			append_dev(h2, br2);
			append_dev(h2, t7);
			append_dev(h2, br3);
			append_dev(h2, t8);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			/*canvas_1_binding*/ ctx[2](null);
			/*a_binding*/ ctx[3](null);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const HRB = 40;
const COL = 10;
const ROW = 20;
const SK = "#2f1a4a";
const TKS = "#8361b0";

function getRandomInt(min, max) {
	min = Math.ceil(min);
	max = Math.floor(max);
	return Math.floor(Math.random() * (max - min)) + min;
}

function instance($$self, $$props, $$invalidate) {
	const I = [
		[[0, 0, 0, 0], [1, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 0]],
		[[0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 1, 0]],
		[[0, 0, 0, 0], [0, 0, 0, 0], [1, 1, 1, 1], [0, 0, 0, 0]],
		[[0, 1, 0, 0], [0, 1, 0, 0], [0, 1, 0, 0], [0, 1, 0, 0]]
	];

	const J = [
		[[1, 0, 0], [1, 1, 1], [0, 0, 0]],
		[[0, 1, 1], [0, 1, 0], [0, 1, 0]],
		[[0, 0, 0], [1, 1, 1], [0, 0, 1]],
		[[0, 1, 0], [0, 1, 0], [1, 1, 0]]
	];

	const L = [
		[[0, 0, 1], [1, 1, 1], [0, 0, 0]],
		[[0, 1, 0], [0, 1, 0], [0, 1, 1]],
		[[0, 0, 0], [1, 1, 1], [1, 0, 0]],
		[[1, 1, 0], [0, 1, 0], [0, 1, 0]]
	];

	const O = [[[0, 0, 0, 0], [0, 1, 1, 0], [0, 1, 1, 0], [0, 0, 0, 0]]];

	const S = [
		[[0, 1, 1], [1, 1, 0], [0, 0, 0]],
		[[0, 1, 0], [0, 1, 1], [0, 0, 1]],
		[[0, 0, 0], [0, 1, 1], [1, 1, 0]],
		[[1, 0, 0], [1, 1, 0], [0, 1, 0]]
	];

	const T = [
		[[0, 1, 0], [1, 1, 1], [0, 0, 0]],
		[[0, 1, 0], [0, 1, 1], [0, 1, 0]],
		[[0, 0, 0], [1, 1, 1], [0, 1, 0]],
		[[0, 1, 0], [1, 1, 0], [0, 1, 0]]
	];

	const Z = [
		[[1, 1, 0], [0, 1, 1], [0, 0, 0]],
		[[0, 0, 1], [0, 1, 1], [0, 1, 0]],
		[[0, 0, 0], [1, 1, 0], [0, 1, 1]],
		[[0, 1, 0], [1, 1, 0], [1, 0, 0]]
	];

	const PIECES = [
		[Z, "red"],
		[S, "green"],
		[T, "yellow"],
		[O, "blue"],
		[L, "purple"],
		[I, "cyan"],
		[J, "orange"]
	];

	var canvas;
	var scoring;
	var context;
	var torei = [];
	let r;
	let c;
	let y;

	for (r = 0; r < ROW; r++) {
		torei[r] = [];

		for (c = 0; c < COL; c++) {
			torei[r][c] = SK;
		}
	}

	function drawHRB(x, y, color) {
		context.fillStyle = color;
		context.fillRect(x * HRB, y * HRB, HRB, HRB);
		context.strokeStyle = TKS;
		context.strokeRect(x * HRB, y * HRB, HRB, HRB);
	}

	function drawBoard() {
		for (r = 0; r < ROW; r++) {
			for (c = 0; c < COL; c++) {
				drawHRB(c, r, torei[r][c]);
			}
		}
	}

	function randomPiece() {
		let random = PIECES[getRandomInt(0, 7)];
		return new Piece(random[0], random[1]);
	}

	let p = randomPiece();
	let score = 0;

	function Piece(tetro, color) {
		this.tetro = tetro;
		this.color = color;
		this.state = 0;
		this.activeTetro = this.tetro[this.state];
		this.x = 3;
		this.y = -2;
	}

	Piece.prototype.draw = function (color) {
		for (r = 0; r < this.activeTetro.length; r++) {
			for (c = 0; c < this.activeTetro.length; c++) {
				if (this.activeTetro[r][c]) {
					drawHRB(this.x + c, this.y + r, color);
				}
			}
		}
	};

	Piece.prototype.in = function () {
		this.draw(this.color);
	};

	Piece.prototype.out = function () {
		this.draw(SK);
	};

	Piece.prototype.moveDown = function () {
		if (!this.collision(0, 1, this.activeTetro)) {
			this.out();
			this.y++;
			this.in();
		} else {
			this.lock();
			p = randomPiece();
		}
	};

	Piece.prototype.moveRight = function () {
		if (!this.collision(1, 0, this.activeTetro)) {
			this.out();
			this.x++;
			this.in();
		}
	};

	Piece.prototype.moveLeft = function () {
		if (!this.collision(-1, 0, this.activeTetro)) {
			this.out();
			this.x--;
			this.in();
		}
	};

	Piece.prototype.rotate = function () {
		let nextPattern = this.tetro[(this.state + 1) % this.tetro.length];
		let kick = 0;

		if (this.collision(0, 0, nextPattern)) {
			if (this.x > COL / 2) {
				kick = -1;
			} else {
				kick = 1;
			}
		}

		if (!this.collision(kick, 0, nextPattern)) {
			this.out();
			this.x += kick;
			this.state = (this.state + 1) % this.tetro.length;
			this.activeTetro = this.tetro[this.state];
			this.in();
		}
	};

	Piece.prototype.lock = function () {
		for (r = 0; r < this.activeTetro.length; r++) {
			for (c = 0; c < this.activeTetro.length; c++) {
				// we skip the vacant squares
				if (!this.activeTetro[r][c]) {
					continue;
				}

				if (this.y + r < 0) {
					alert("Game Over");
					gameOver = true;
					reset();
					break;
				}

				torei[this.y + r][this.x + c] = this.color;
			}
		}

		// remove full rows
		for (r = 0; r < ROW; r++) {
			let isRowFull = true;

			for (c = 0; c < COL; c++) {
				isRowFull = isRowFull && torei[r][c] != SK;
			}

			if (isRowFull) {
				for (y = r; y > 1; y--) {
					for (c = 0; c < COL; c++) {
						torei[y][c] = torei[y - 1][c];
					}
				}

				for (c = 0; c < COL; c++) {
					torei[0][c] = SK;
				}

				score += 10;
			}
		}

		drawBoard();
		$$invalidate(1, scoring.innerHTML = " " + score + " ", scoring);
	};

	Piece.prototype.collision = function (x, y, tetro) {
		for (r = 0; r < tetro.length; r++) {
			for (c = 0; c < tetro.length; c++) {
				if (!tetro[r][c]) {
					continue;
				}

				let newX = this.x + c + x;
				let newY = this.y + r + y;

				if (newX < 0 || newX >= COL || newY >= ROW) {
					return true;
				}

				if (newY <= 0) {
					continue;
				}

				if (torei[newY][newX] != SK) {
					return true;
				}
			}
		}

		return false;
	};

	document.addEventListener("keydown", CONTROL);

	function CONTROL(event) {
		if (event.keyCode == 81) {
			p.moveLeft();
		} else if (event.keyCode == 90) {
			p.rotate();
		} else if (event.keyCode == 68) {
			p.moveRight();
		} else if (event.keyCode == 83) {
			p.moveDown();
		}
	}

	let dropStart = Date.now();
	let gameOver = false;

	function drop() {
		let now = Date.now();
		let delta = now - dropStart;

		if (delta > 1000) {
			p.moveDown();
			dropStart = Date.now();
		}

		if (!gameOver) {
			requestAnimationFrame(drop);
		}
	}

	function reset() {
		for (r = 0; r < ROW; r++) {
			torei[r] = [];

			for (c = 0; c < COL; c++) {
				torei[r][c] = SK;
			}

			p = randomPiece();
			gameOver = false;
			score = 0;
			$$invalidate(1, scoring.innerHTML = " " + score + " ", scoring);
		}
	}

	onMount(() => {
		context = canvas.getContext("2d");
		drawBoard();
		drop();
	});

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Tetris> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Tetris", $$slots, []);

	function canvas_1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			canvas = $$value;
			$$invalidate(0, canvas);
		});
	}

	function a_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			scoring = $$value;
			$$invalidate(1, scoring);
		});
	}

	$$self.$capture_state = () => ({
		onMount,
		I,
		J,
		L,
		O,
		S,
		T,
		Z,
		HRB,
		COL,
		ROW,
		SK,
		TKS,
		PIECES,
		canvas,
		scoring,
		context,
		torei,
		r,
		c,
		y,
		getRandomInt,
		drawHRB,
		drawBoard,
		randomPiece,
		p,
		score,
		Piece,
		CONTROL,
		dropStart,
		gameOver,
		drop,
		reset
	});

	$$self.$inject_state = $$props => {
		if ("canvas" in $$props) $$invalidate(0, canvas = $$props.canvas);
		if ("scoring" in $$props) $$invalidate(1, scoring = $$props.scoring);
		if ("context" in $$props) context = $$props.context;
		if ("torei" in $$props) torei = $$props.torei;
		if ("r" in $$props) r = $$props.r;
		if ("c" in $$props) c = $$props.c;
		if ("y" in $$props) y = $$props.y;
		if ("p" in $$props) p = $$props.p;
		if ("score" in $$props) score = $$props.score;
		if ("dropStart" in $$props) dropStart = $$props.dropStart;
		if ("gameOver" in $$props) gameOver = $$props.gameOver;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [canvas, scoring, canvas_1_binding, a_binding];
}

class Tetris extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Tetris",
			options,
			id: create_fragment.name
		});
	}
}

export default Tetris;
//# sourceMappingURL=Tetris-f7a82b07.js.map
